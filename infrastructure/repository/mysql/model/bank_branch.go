// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BankBranch is an object representing the database table.
type BankBranch struct { // 支店ID
	ID uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 銀行ID
	BankID uint64 `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	// 銀行支店名
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *bankBranchR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bankBranchL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BankBranchColumns = struct {
	ID     string
	BankID string
	Name   string
}{
	ID:     "id",
	BankID: "bank_id",
	Name:   "name",
}

var BankBranchTableColumns = struct {
	ID     string
	BankID string
	Name   string
}{
	ID:     "bank_branch.id",
	BankID: "bank_branch.bank_id",
	Name:   "bank_branch.name",
}

// Generated where

var BankBranchWhere = struct {
	ID     whereHelperuint64
	BankID whereHelperuint64
	Name   whereHelperstring
}{
	ID:     whereHelperuint64{field: "`bank_branch`.`id`"},
	BankID: whereHelperuint64{field: "`bank_branch`.`bank_id`"},
	Name:   whereHelperstring{field: "`bank_branch`.`name`"},
}

// BankBranchRels is where relationship names are stored.
var BankBranchRels = struct {
	Bank               string
	BranchBankAccounts string
}{
	Bank:               "Bank",
	BranchBankAccounts: "BranchBankAccounts",
}

// bankBranchR is where relationships are stored.
type bankBranchR struct {
	Bank               *Bank            `boil:"Bank" json:"Bank" toml:"Bank" yaml:"Bank"`
	BranchBankAccounts BankAccountSlice `boil:"BranchBankAccounts" json:"BranchBankAccounts" toml:"BranchBankAccounts" yaml:"BranchBankAccounts"`
}

// NewStruct creates a new relationship struct
func (*bankBranchR) NewStruct() *bankBranchR {
	return &bankBranchR{}
}

func (r *bankBranchR) GetBank() *Bank {
	if r == nil {
		return nil
	}
	return r.Bank
}

func (r *bankBranchR) GetBranchBankAccounts() BankAccountSlice {
	if r == nil {
		return nil
	}
	return r.BranchBankAccounts
}

// bankBranchL is where Load methods for each relationship are stored.
type bankBranchL struct{}

var (
	bankBranchAllColumns            = []string{"id", "bank_id", "name"}
	bankBranchColumnsWithoutDefault = []string{"bank_id", "name"}
	bankBranchColumnsWithDefault    = []string{"id"}
	bankBranchPrimaryKeyColumns     = []string{"id"}
	bankBranchGeneratedColumns      = []string{}
)

type (
	// BankBranchSlice is an alias for a slice of pointers to BankBranch.
	// This should almost always be used instead of []BankBranch.
	BankBranchSlice []*BankBranch
	// BankBranchHook is the signature for custom BankBranch hook methods
	BankBranchHook func(context.Context, boil.ContextExecutor, *BankBranch) error

	bankBranchQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bankBranchType                 = reflect.TypeOf(&BankBranch{})
	bankBranchMapping              = queries.MakeStructMapping(bankBranchType)
	bankBranchPrimaryKeyMapping, _ = queries.BindMapping(bankBranchType, bankBranchMapping, bankBranchPrimaryKeyColumns)
	bankBranchInsertCacheMut       sync.RWMutex
	bankBranchInsertCache          = make(map[string]insertCache)
	bankBranchUpdateCacheMut       sync.RWMutex
	bankBranchUpdateCache          = make(map[string]updateCache)
	bankBranchUpsertCacheMut       sync.RWMutex
	bankBranchUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bankBranchAfterSelectHooks []BankBranchHook

var bankBranchBeforeInsertHooks []BankBranchHook
var bankBranchAfterInsertHooks []BankBranchHook

var bankBranchBeforeUpdateHooks []BankBranchHook
var bankBranchAfterUpdateHooks []BankBranchHook

var bankBranchBeforeDeleteHooks []BankBranchHook
var bankBranchAfterDeleteHooks []BankBranchHook

var bankBranchBeforeUpsertHooks []BankBranchHook
var bankBranchAfterUpsertHooks []BankBranchHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BankBranch) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankBranchAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BankBranch) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankBranchBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BankBranch) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankBranchAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BankBranch) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankBranchBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BankBranch) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankBranchAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BankBranch) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankBranchBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BankBranch) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankBranchAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BankBranch) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankBranchBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BankBranch) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankBranchAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBankBranchHook registers your hook function for all future operations.
func AddBankBranchHook(hookPoint boil.HookPoint, bankBranchHook BankBranchHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bankBranchAfterSelectHooks = append(bankBranchAfterSelectHooks, bankBranchHook)
	case boil.BeforeInsertHook:
		bankBranchBeforeInsertHooks = append(bankBranchBeforeInsertHooks, bankBranchHook)
	case boil.AfterInsertHook:
		bankBranchAfterInsertHooks = append(bankBranchAfterInsertHooks, bankBranchHook)
	case boil.BeforeUpdateHook:
		bankBranchBeforeUpdateHooks = append(bankBranchBeforeUpdateHooks, bankBranchHook)
	case boil.AfterUpdateHook:
		bankBranchAfterUpdateHooks = append(bankBranchAfterUpdateHooks, bankBranchHook)
	case boil.BeforeDeleteHook:
		bankBranchBeforeDeleteHooks = append(bankBranchBeforeDeleteHooks, bankBranchHook)
	case boil.AfterDeleteHook:
		bankBranchAfterDeleteHooks = append(bankBranchAfterDeleteHooks, bankBranchHook)
	case boil.BeforeUpsertHook:
		bankBranchBeforeUpsertHooks = append(bankBranchBeforeUpsertHooks, bankBranchHook)
	case boil.AfterUpsertHook:
		bankBranchAfterUpsertHooks = append(bankBranchAfterUpsertHooks, bankBranchHook)
	}
}

// One returns a single bankBranch record from the query.
func (q bankBranchQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BankBranch, error) {
	o := &BankBranch{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for bank_branch")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BankBranch records from the query.
func (q bankBranchQuery) All(ctx context.Context, exec boil.ContextExecutor) (BankBranchSlice, error) {
	var o []*BankBranch

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to BankBranch slice")
	}

	if len(bankBranchAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BankBranch records in the query.
func (q bankBranchQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count bank_branch rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bankBranchQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if bank_branch exists")
	}

	return count > 0, nil
}

// Bank pointed to by the foreign key.
func (o *BankBranch) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	return Banks(queryMods...)
}

// BranchBankAccounts retrieves all the bank_account's BankAccounts with an executor via branch_id column.
func (o *BankBranch) BranchBankAccounts(mods ...qm.QueryMod) bankAccountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`bank_account`.`branch_id`=?", o.ID),
	)

	return BankAccounts(queryMods...)
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bankBranchL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBankBranch interface{}, mods queries.Applicator) error {
	var slice []*BankBranch
	var object *BankBranch

	if singular {
		var ok bool
		object, ok = maybeBankBranch.(*BankBranch)
		if !ok {
			object = new(BankBranch)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBankBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBankBranch))
			}
		}
	} else {
		s, ok := maybeBankBranch.(*[]*BankBranch)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBankBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBankBranch))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bankBranchR{}
		}
		args = append(args, object.BankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bankBranchR{}
			}

			for _, a := range args {
				if a == obj.BankID {
					continue Outer
				}
			}

			args = append(args, obj.BankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bank`),
		qm.WhereIn(`bank.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bank")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bank")
	}

	if len(bankAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankBranches = append(foreign.R.BankBranches, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.ID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankBranches = append(foreign.R.BankBranches, local)
				break
			}
		}
	}

	return nil
}

// LoadBranchBankAccounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bankBranchL) LoadBranchBankAccounts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBankBranch interface{}, mods queries.Applicator) error {
	var slice []*BankBranch
	var object *BankBranch

	if singular {
		var ok bool
		object, ok = maybeBankBranch.(*BankBranch)
		if !ok {
			object = new(BankBranch)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBankBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBankBranch))
			}
		}
	} else {
		s, ok := maybeBankBranch.(*[]*BankBranch)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBankBranch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBankBranch))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bankBranchR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bankBranchR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bank_account`),
		qm.WhereIn(`bank_account.branch_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bank_account")
	}

	var resultSlice []*BankAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bank_account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bank_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bank_account")
	}

	if len(bankAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BranchBankAccounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bankAccountR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BranchID {
				local.R.BranchBankAccounts = append(local.R.BranchBankAccounts, foreign)
				if foreign.R == nil {
					foreign.R = &bankAccountR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// SetBank of the bankBranch to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankBranches.
func (o *BankBranch) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `bank_branch` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, bankBranchPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.ID
	if o.R == nil {
		o.R = &bankBranchR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankBranches: BankBranchSlice{o},
		}
	} else {
		related.R.BankBranches = append(related.R.BankBranches, o)
	}

	return nil
}

// AddBranchBankAccounts adds the given related objects to the existing relationships
// of the bank_branch, optionally inserting them as new records.
// Appends related to o.R.BranchBankAccounts.
// Sets related.R.Branch appropriately.
func (o *BankBranch) AddBranchBankAccounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BankAccount) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BranchID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bank_account` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"branch_id"}),
				strmangle.WhereClause("`", "`", 0, bankAccountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BranchID = o.ID
		}
	}

	if o.R == nil {
		o.R = &bankBranchR{
			BranchBankAccounts: related,
		}
	} else {
		o.R.BranchBankAccounts = append(o.R.BranchBankAccounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bankAccountR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// BankBranches retrieves all the records using an executor.
func BankBranches(mods ...qm.QueryMod) bankBranchQuery {
	mods = append(mods, qm.From("`bank_branch`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`bank_branch`.*"})
	}

	return bankBranchQuery{q}
}

// FindBankBranch retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBankBranch(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*BankBranch, error) {
	bankBranchObj := &BankBranch{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bank_branch` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bankBranchObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from bank_branch")
	}

	if err = bankBranchObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bankBranchObj, err
	}

	return bankBranchObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BankBranch) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no bank_branch provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bankBranchColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bankBranchInsertCacheMut.RLock()
	cache, cached := bankBranchInsertCache[key]
	bankBranchInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bankBranchAllColumns,
			bankBranchColumnsWithDefault,
			bankBranchColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bankBranchType, bankBranchMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bankBranchType, bankBranchMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `bank_branch` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `bank_branch` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bank_branch` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bankBranchPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into bank_branch")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bankBranchMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for bank_branch")
	}

CacheNoHooks:
	if !cached {
		bankBranchInsertCacheMut.Lock()
		bankBranchInsertCache[key] = cache
		bankBranchInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BankBranch.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BankBranch) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bankBranchUpdateCacheMut.RLock()
	cache, cached := bankBranchUpdateCache[key]
	bankBranchUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bankBranchAllColumns,
			bankBranchPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update bank_branch, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bank_branch` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bankBranchPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bankBranchType, bankBranchMapping, append(wl, bankBranchPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update bank_branch row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for bank_branch")
	}

	if !cached {
		bankBranchUpdateCacheMut.Lock()
		bankBranchUpdateCache[key] = cache
		bankBranchUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bankBranchQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for bank_branch")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for bank_branch")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BankBranchSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankBranchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `bank_branch` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankBranchPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in bankBranch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all bankBranch")
	}
	return rowsAff, nil
}

var mySQLBankBranchUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BankBranch) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no bank_branch provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bankBranchColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBankBranchUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bankBranchUpsertCacheMut.RLock()
	cache, cached := bankBranchUpsertCache[key]
	bankBranchUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bankBranchAllColumns,
			bankBranchColumnsWithDefault,
			bankBranchColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bankBranchAllColumns,
			bankBranchPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert bank_branch, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`bank_branch`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bank_branch` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bankBranchType, bankBranchMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bankBranchType, bankBranchMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for bank_branch")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bankBranchMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bankBranchType, bankBranchMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for bank_branch")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for bank_branch")
	}

CacheNoHooks:
	if !cached {
		bankBranchUpsertCacheMut.Lock()
		bankBranchUpsertCache[key] = cache
		bankBranchUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BankBranch record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BankBranch) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no BankBranch provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bankBranchPrimaryKeyMapping)
	sql := "DELETE FROM `bank_branch` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from bank_branch")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for bank_branch")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bankBranchQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no bankBranchQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from bank_branch")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for bank_branch")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BankBranchSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bankBranchBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankBranchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `bank_branch` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankBranchPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from bankBranch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for bank_branch")
	}

	if len(bankBranchAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BankBranch) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBankBranch(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BankBranchSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BankBranchSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankBranchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `bank_branch`.* FROM `bank_branch` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankBranchPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in BankBranchSlice")
	}

	*o = slice

	return nil
}

// BankBranchExists checks if the BankBranch row exists.
func BankBranchExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `bank_branch` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if bank_branch exists")
	}

	return exists, nil
}

// Exists checks if the BankBranch row exists.
func (o *BankBranch) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BankBranchExists(ctx, exec, o.ID)
}
