// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CompanyClient is an object representing the database table.
type CompanyClient struct { // 取引先ID
	ID uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 会社ID
	CompanyID uint64 `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	// 取引先会社ID
	ClientCompanyID uint64    `boil:"client_company_id" json:"client_company_id" toml:"client_company_id" yaml:"client_company_id"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *companyClientR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L companyClientL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompanyClientColumns = struct {
	ID              string
	CompanyID       string
	ClientCompanyID string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "id",
	CompanyID:       "company_id",
	ClientCompanyID: "client_company_id",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var CompanyClientTableColumns = struct {
	ID              string
	CompanyID       string
	ClientCompanyID string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "company_client.id",
	CompanyID:       "company_client.company_id",
	ClientCompanyID: "company_client.client_company_id",
	CreatedAt:       "company_client.created_at",
	UpdatedAt:       "company_client.updated_at",
}

// Generated where

var CompanyClientWhere = struct {
	ID              whereHelperuint64
	CompanyID       whereHelperuint64
	ClientCompanyID whereHelperuint64
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
}{
	ID:              whereHelperuint64{field: "`company_client`.`id`"},
	CompanyID:       whereHelperuint64{field: "`company_client`.`company_id`"},
	ClientCompanyID: whereHelperuint64{field: "`company_client`.`client_company_id`"},
	CreatedAt:       whereHelpertime_Time{field: "`company_client`.`created_at`"},
	UpdatedAt:       whereHelpertime_Time{field: "`company_client`.`updated_at`"},
}

// CompanyClientRels is where relationship names are stored.
var CompanyClientRels = struct {
	ClientCompany string
	Company       string
	Invoices      string
}{
	ClientCompany: "ClientCompany",
	Company:       "Company",
	Invoices:      "Invoices",
}

// companyClientR is where relationships are stored.
type companyClientR struct {
	ClientCompany *Company     `boil:"ClientCompany" json:"ClientCompany" toml:"ClientCompany" yaml:"ClientCompany"`
	Company       *Company     `boil:"Company" json:"Company" toml:"Company" yaml:"Company"`
	Invoices      InvoiceSlice `boil:"Invoices" json:"Invoices" toml:"Invoices" yaml:"Invoices"`
}

// NewStruct creates a new relationship struct
func (*companyClientR) NewStruct() *companyClientR {
	return &companyClientR{}
}

func (r *companyClientR) GetClientCompany() *Company {
	if r == nil {
		return nil
	}
	return r.ClientCompany
}

func (r *companyClientR) GetCompany() *Company {
	if r == nil {
		return nil
	}
	return r.Company
}

func (r *companyClientR) GetInvoices() InvoiceSlice {
	if r == nil {
		return nil
	}
	return r.Invoices
}

// companyClientL is where Load methods for each relationship are stored.
type companyClientL struct{}

var (
	companyClientAllColumns            = []string{"id", "company_id", "client_company_id", "created_at", "updated_at"}
	companyClientColumnsWithoutDefault = []string{"company_id", "client_company_id", "created_at", "updated_at"}
	companyClientColumnsWithDefault    = []string{"id"}
	companyClientPrimaryKeyColumns     = []string{"id"}
	companyClientGeneratedColumns      = []string{}
)

type (
	// CompanyClientSlice is an alias for a slice of pointers to CompanyClient.
	// This should almost always be used instead of []CompanyClient.
	CompanyClientSlice []*CompanyClient
	// CompanyClientHook is the signature for custom CompanyClient hook methods
	CompanyClientHook func(context.Context, boil.ContextExecutor, *CompanyClient) error

	companyClientQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	companyClientType                 = reflect.TypeOf(&CompanyClient{})
	companyClientMapping              = queries.MakeStructMapping(companyClientType)
	companyClientPrimaryKeyMapping, _ = queries.BindMapping(companyClientType, companyClientMapping, companyClientPrimaryKeyColumns)
	companyClientInsertCacheMut       sync.RWMutex
	companyClientInsertCache          = make(map[string]insertCache)
	companyClientUpdateCacheMut       sync.RWMutex
	companyClientUpdateCache          = make(map[string]updateCache)
	companyClientUpsertCacheMut       sync.RWMutex
	companyClientUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var companyClientAfterSelectHooks []CompanyClientHook

var companyClientBeforeInsertHooks []CompanyClientHook
var companyClientAfterInsertHooks []CompanyClientHook

var companyClientBeforeUpdateHooks []CompanyClientHook
var companyClientAfterUpdateHooks []CompanyClientHook

var companyClientBeforeDeleteHooks []CompanyClientHook
var companyClientAfterDeleteHooks []CompanyClientHook

var companyClientBeforeUpsertHooks []CompanyClientHook
var companyClientAfterUpsertHooks []CompanyClientHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CompanyClient) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyClientAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CompanyClient) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyClientBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CompanyClient) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyClientAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CompanyClient) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyClientBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CompanyClient) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyClientAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CompanyClient) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyClientBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CompanyClient) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyClientAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CompanyClient) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyClientBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CompanyClient) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyClientAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCompanyClientHook registers your hook function for all future operations.
func AddCompanyClientHook(hookPoint boil.HookPoint, companyClientHook CompanyClientHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		companyClientAfterSelectHooks = append(companyClientAfterSelectHooks, companyClientHook)
	case boil.BeforeInsertHook:
		companyClientBeforeInsertHooks = append(companyClientBeforeInsertHooks, companyClientHook)
	case boil.AfterInsertHook:
		companyClientAfterInsertHooks = append(companyClientAfterInsertHooks, companyClientHook)
	case boil.BeforeUpdateHook:
		companyClientBeforeUpdateHooks = append(companyClientBeforeUpdateHooks, companyClientHook)
	case boil.AfterUpdateHook:
		companyClientAfterUpdateHooks = append(companyClientAfterUpdateHooks, companyClientHook)
	case boil.BeforeDeleteHook:
		companyClientBeforeDeleteHooks = append(companyClientBeforeDeleteHooks, companyClientHook)
	case boil.AfterDeleteHook:
		companyClientAfterDeleteHooks = append(companyClientAfterDeleteHooks, companyClientHook)
	case boil.BeforeUpsertHook:
		companyClientBeforeUpsertHooks = append(companyClientBeforeUpsertHooks, companyClientHook)
	case boil.AfterUpsertHook:
		companyClientAfterUpsertHooks = append(companyClientAfterUpsertHooks, companyClientHook)
	}
}

// One returns a single companyClient record from the query.
func (q companyClientQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CompanyClient, error) {
	o := &CompanyClient{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for company_client")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CompanyClient records from the query.
func (q companyClientQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompanyClientSlice, error) {
	var o []*CompanyClient

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to CompanyClient slice")
	}

	if len(companyClientAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CompanyClient records in the query.
func (q companyClientQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count company_client rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q companyClientQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if company_client exists")
	}

	return count > 0, nil
}

// ClientCompany pointed to by the foreign key.
func (o *CompanyClient) ClientCompany(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ClientCompanyID),
	}

	queryMods = append(queryMods, mods...)

	return Companies(queryMods...)
}

// Company pointed to by the foreign key.
func (o *CompanyClient) Company(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CompanyID),
	}

	queryMods = append(queryMods, mods...)

	return Companies(queryMods...)
}

// Invoices retrieves all the invoice's Invoices with an executor.
func (o *CompanyClient) Invoices(mods ...qm.QueryMod) invoiceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`invoice`.`company_client_id`=?", o.ID),
	)

	return Invoices(queryMods...)
}

// LoadClientCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (companyClientL) LoadClientCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompanyClient interface{}, mods queries.Applicator) error {
	var slice []*CompanyClient
	var object *CompanyClient

	if singular {
		var ok bool
		object, ok = maybeCompanyClient.(*CompanyClient)
		if !ok {
			object = new(CompanyClient)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompanyClient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompanyClient))
			}
		}
	} else {
		s, ok := maybeCompanyClient.(*[]*CompanyClient)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompanyClient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompanyClient))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyClientR{}
		}
		args = append(args, object.ClientCompanyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyClientR{}
			}

			for _, a := range args {
				if a == obj.ClientCompanyID {
					continue Outer
				}
			}

			args = append(args, obj.ClientCompanyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`company`),
		qm.WhereIn(`company.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for company")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for company")
	}

	if len(companyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ClientCompany = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.ClientCompanyCompanyClients = append(foreign.R.ClientCompanyCompanyClients, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClientCompanyID == foreign.ID {
				local.R.ClientCompany = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.ClientCompanyCompanyClients = append(foreign.R.ClientCompanyCompanyClients, local)
				break
			}
		}
	}

	return nil
}

// LoadCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (companyClientL) LoadCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompanyClient interface{}, mods queries.Applicator) error {
	var slice []*CompanyClient
	var object *CompanyClient

	if singular {
		var ok bool
		object, ok = maybeCompanyClient.(*CompanyClient)
		if !ok {
			object = new(CompanyClient)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompanyClient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompanyClient))
			}
		}
	} else {
		s, ok := maybeCompanyClient.(*[]*CompanyClient)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompanyClient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompanyClient))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyClientR{}
		}
		args = append(args, object.CompanyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyClientR{}
			}

			for _, a := range args {
				if a == obj.CompanyID {
					continue Outer
				}
			}

			args = append(args, obj.CompanyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`company`),
		qm.WhereIn(`company.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for company")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for company")
	}

	if len(companyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Company = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.CompanyClients = append(foreign.R.CompanyClients, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompanyID == foreign.ID {
				local.R.Company = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.CompanyClients = append(foreign.R.CompanyClients, local)
				break
			}
		}
	}

	return nil
}

// LoadInvoices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyClientL) LoadInvoices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompanyClient interface{}, mods queries.Applicator) error {
	var slice []*CompanyClient
	var object *CompanyClient

	if singular {
		var ok bool
		object, ok = maybeCompanyClient.(*CompanyClient)
		if !ok {
			object = new(CompanyClient)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompanyClient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompanyClient))
			}
		}
	} else {
		s, ok := maybeCompanyClient.(*[]*CompanyClient)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompanyClient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompanyClient))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyClientR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyClientR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`invoice`),
		qm.WhereIn(`invoice.company_client_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load invoice")
	}

	var resultSlice []*Invoice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice invoice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on invoice")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Invoices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &invoiceR{}
			}
			foreign.R.CompanyClient = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CompanyClientID {
				local.R.Invoices = append(local.R.Invoices, foreign)
				if foreign.R == nil {
					foreign.R = &invoiceR{}
				}
				foreign.R.CompanyClient = local
				break
			}
		}
	}

	return nil
}

// SetClientCompany of the companyClient to the related item.
// Sets o.R.ClientCompany to related.
// Adds o to related.R.ClientCompanyCompanyClients.
func (o *CompanyClient) SetClientCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `company_client` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"client_company_id"}),
		strmangle.WhereClause("`", "`", 0, companyClientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClientCompanyID = related.ID
	if o.R == nil {
		o.R = &companyClientR{
			ClientCompany: related,
		}
	} else {
		o.R.ClientCompany = related
	}

	if related.R == nil {
		related.R = &companyR{
			ClientCompanyCompanyClients: CompanyClientSlice{o},
		}
	} else {
		related.R.ClientCompanyCompanyClients = append(related.R.ClientCompanyCompanyClients, o)
	}

	return nil
}

// SetCompany of the companyClient to the related item.
// Sets o.R.Company to related.
// Adds o to related.R.CompanyClients.
func (o *CompanyClient) SetCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `company_client` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"company_id"}),
		strmangle.WhereClause("`", "`", 0, companyClientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompanyID = related.ID
	if o.R == nil {
		o.R = &companyClientR{
			Company: related,
		}
	} else {
		o.R.Company = related
	}

	if related.R == nil {
		related.R = &companyR{
			CompanyClients: CompanyClientSlice{o},
		}
	} else {
		related.R.CompanyClients = append(related.R.CompanyClients, o)
	}

	return nil
}

// AddInvoices adds the given related objects to the existing relationships
// of the company_client, optionally inserting them as new records.
// Appends related to o.R.Invoices.
// Sets related.R.CompanyClient appropriately.
func (o *CompanyClient) AddInvoices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Invoice) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompanyClientID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `invoice` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"company_client_id"}),
				strmangle.WhereClause("`", "`", 0, invoicePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompanyClientID = o.ID
		}
	}

	if o.R == nil {
		o.R = &companyClientR{
			Invoices: related,
		}
	} else {
		o.R.Invoices = append(o.R.Invoices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &invoiceR{
				CompanyClient: o,
			}
		} else {
			rel.R.CompanyClient = o
		}
	}
	return nil
}

// CompanyClients retrieves all the records using an executor.
func CompanyClients(mods ...qm.QueryMod) companyClientQuery {
	mods = append(mods, qm.From("`company_client`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`company_client`.*"})
	}

	return companyClientQuery{q}
}

// FindCompanyClient retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompanyClient(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*CompanyClient, error) {
	companyClientObj := &CompanyClient{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `company_client` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, companyClientObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from company_client")
	}

	if err = companyClientObj.doAfterSelectHooks(ctx, exec); err != nil {
		return companyClientObj, err
	}

	return companyClientObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CompanyClient) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no company_client provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(companyClientColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	companyClientInsertCacheMut.RLock()
	cache, cached := companyClientInsertCache[key]
	companyClientInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			companyClientAllColumns,
			companyClientColumnsWithDefault,
			companyClientColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(companyClientType, companyClientMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(companyClientType, companyClientMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `company_client` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `company_client` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `company_client` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, companyClientPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into company_client")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == companyClientMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for company_client")
	}

CacheNoHooks:
	if !cached {
		companyClientInsertCacheMut.Lock()
		companyClientInsertCache[key] = cache
		companyClientInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CompanyClient.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CompanyClient) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	companyClientUpdateCacheMut.RLock()
	cache, cached := companyClientUpdateCache[key]
	companyClientUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			companyClientAllColumns,
			companyClientPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update company_client, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `company_client` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, companyClientPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(companyClientType, companyClientMapping, append(wl, companyClientPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update company_client row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for company_client")
	}

	if !cached {
		companyClientUpdateCacheMut.Lock()
		companyClientUpdateCache[key] = cache
		companyClientUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q companyClientQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for company_client")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for company_client")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompanyClientSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `company_client` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyClientPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in companyClient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all companyClient")
	}
	return rowsAff, nil
}

var mySQLCompanyClientUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CompanyClient) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no company_client provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(companyClientColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCompanyClientUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	companyClientUpsertCacheMut.RLock()
	cache, cached := companyClientUpsertCache[key]
	companyClientUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			companyClientAllColumns,
			companyClientColumnsWithDefault,
			companyClientColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			companyClientAllColumns,
			companyClientPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert company_client, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`company_client`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `company_client` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(companyClientType, companyClientMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(companyClientType, companyClientMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for company_client")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == companyClientMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(companyClientType, companyClientMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for company_client")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for company_client")
	}

CacheNoHooks:
	if !cached {
		companyClientUpsertCacheMut.Lock()
		companyClientUpsertCache[key] = cache
		companyClientUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CompanyClient record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CompanyClient) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no CompanyClient provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), companyClientPrimaryKeyMapping)
	sql := "DELETE FROM `company_client` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from company_client")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for company_client")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q companyClientQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no companyClientQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from company_client")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for company_client")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompanyClientSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(companyClientBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `company_client` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyClientPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from companyClient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for company_client")
	}

	if len(companyClientAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CompanyClient) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompanyClient(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompanyClientSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompanyClientSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `company_client`.* FROM `company_client` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyClientPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in CompanyClientSlice")
	}

	*o = slice

	return nil
}

// CompanyClientExists checks if the CompanyClient row exists.
func CompanyClientExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `company_client` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if company_client exists")
	}

	return exists, nil
}

// Exists checks if the CompanyClient row exists.
func (o *CompanyClient) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CompanyClientExists(ctx, exec, o.ID)
}
