// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Bank is an object representing the database table.
type Bank struct { // 銀行口座ID
	ID uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	// randID
	RandID string `boil:"rand_id" json:"rand_id" toml:"rand_id" yaml:"rand_id"`
	// 銀行名
	BankName string `boil:"bank_name" json:"bank_name" toml:"bank_name" yaml:"bank_name"`

	R *bankR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bankL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BankColumns = struct {
	ID       string
	RandID   string
	BankName string
}{
	ID:       "id",
	RandID:   "rand_id",
	BankName: "bank_name",
}

var BankTableColumns = struct {
	ID       string
	RandID   string
	BankName string
}{
	ID:       "bank.id",
	RandID:   "bank.rand_id",
	BankName: "bank.bank_name",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint64) IN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint64) NIN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var BankWhere = struct {
	ID       whereHelperuint64
	RandID   whereHelperstring
	BankName whereHelperstring
}{
	ID:       whereHelperuint64{field: "`bank`.`id`"},
	RandID:   whereHelperstring{field: "`bank`.`rand_id`"},
	BankName: whereHelperstring{field: "`bank`.`bank_name`"},
}

// BankRels is where relationship names are stored.
var BankRels = struct {
	BankAccounts string
	BankBranches string
}{
	BankAccounts: "BankAccounts",
	BankBranches: "BankBranches",
}

// bankR is where relationships are stored.
type bankR struct {
	BankAccounts BankAccountSlice `boil:"BankAccounts" json:"BankAccounts" toml:"BankAccounts" yaml:"BankAccounts"`
	BankBranches BankBranchSlice  `boil:"BankBranches" json:"BankBranches" toml:"BankBranches" yaml:"BankBranches"`
}

// NewStruct creates a new relationship struct
func (*bankR) NewStruct() *bankR {
	return &bankR{}
}

func (r *bankR) GetBankAccounts() BankAccountSlice {
	if r == nil {
		return nil
	}
	return r.BankAccounts
}

func (r *bankR) GetBankBranches() BankBranchSlice {
	if r == nil {
		return nil
	}
	return r.BankBranches
}

// bankL is where Load methods for each relationship are stored.
type bankL struct{}

var (
	bankAllColumns            = []string{"id", "rand_id", "bank_name"}
	bankColumnsWithoutDefault = []string{"rand_id", "bank_name"}
	bankColumnsWithDefault    = []string{"id"}
	bankPrimaryKeyColumns     = []string{"id"}
	bankGeneratedColumns      = []string{}
)

type (
	// BankSlice is an alias for a slice of pointers to Bank.
	// This should almost always be used instead of []Bank.
	BankSlice []*Bank
	// BankHook is the signature for custom Bank hook methods
	BankHook func(context.Context, boil.ContextExecutor, *Bank) error

	bankQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bankType                 = reflect.TypeOf(&Bank{})
	bankMapping              = queries.MakeStructMapping(bankType)
	bankPrimaryKeyMapping, _ = queries.BindMapping(bankType, bankMapping, bankPrimaryKeyColumns)
	bankInsertCacheMut       sync.RWMutex
	bankInsertCache          = make(map[string]insertCache)
	bankUpdateCacheMut       sync.RWMutex
	bankUpdateCache          = make(map[string]updateCache)
	bankUpsertCacheMut       sync.RWMutex
	bankUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bankAfterSelectHooks []BankHook

var bankBeforeInsertHooks []BankHook
var bankAfterInsertHooks []BankHook

var bankBeforeUpdateHooks []BankHook
var bankAfterUpdateHooks []BankHook

var bankBeforeDeleteHooks []BankHook
var bankAfterDeleteHooks []BankHook

var bankBeforeUpsertHooks []BankHook
var bankAfterUpsertHooks []BankHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Bank) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Bank) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Bank) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Bank) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Bank) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Bank) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Bank) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Bank) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Bank) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBankHook registers your hook function for all future operations.
func AddBankHook(hookPoint boil.HookPoint, bankHook BankHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bankAfterSelectHooks = append(bankAfterSelectHooks, bankHook)
	case boil.BeforeInsertHook:
		bankBeforeInsertHooks = append(bankBeforeInsertHooks, bankHook)
	case boil.AfterInsertHook:
		bankAfterInsertHooks = append(bankAfterInsertHooks, bankHook)
	case boil.BeforeUpdateHook:
		bankBeforeUpdateHooks = append(bankBeforeUpdateHooks, bankHook)
	case boil.AfterUpdateHook:
		bankAfterUpdateHooks = append(bankAfterUpdateHooks, bankHook)
	case boil.BeforeDeleteHook:
		bankBeforeDeleteHooks = append(bankBeforeDeleteHooks, bankHook)
	case boil.AfterDeleteHook:
		bankAfterDeleteHooks = append(bankAfterDeleteHooks, bankHook)
	case boil.BeforeUpsertHook:
		bankBeforeUpsertHooks = append(bankBeforeUpsertHooks, bankHook)
	case boil.AfterUpsertHook:
		bankAfterUpsertHooks = append(bankAfterUpsertHooks, bankHook)
	}
}

// One returns a single bank record from the query.
func (q bankQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Bank, error) {
	o := &Bank{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for bank")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Bank records from the query.
func (q bankQuery) All(ctx context.Context, exec boil.ContextExecutor) (BankSlice, error) {
	var o []*Bank

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Bank slice")
	}

	if len(bankAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Bank records in the query.
func (q bankQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count bank rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bankQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if bank exists")
	}

	return count > 0, nil
}

// BankAccounts retrieves all the bank_account's BankAccounts with an executor.
func (o *Bank) BankAccounts(mods ...qm.QueryMod) bankAccountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`bank_account`.`bank_id`=?", o.ID),
	)

	return BankAccounts(queryMods...)
}

// BankBranches retrieves all the bank_branch's BankBranches with an executor.
func (o *Bank) BankBranches(mods ...qm.QueryMod) bankBranchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`bank_branch`.`bank_id`=?", o.ID),
	)

	return BankBranches(queryMods...)
}

// LoadBankAccounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bankL) LoadBankAccounts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBank interface{}, mods queries.Applicator) error {
	var slice []*Bank
	var object *Bank

	if singular {
		var ok bool
		object, ok = maybeBank.(*Bank)
		if !ok {
			object = new(Bank)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBank))
			}
		}
	} else {
		s, ok := maybeBank.(*[]*Bank)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBank))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bankR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bankR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bank_account`),
		qm.WhereIn(`bank_account.bank_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bank_account")
	}

	var resultSlice []*BankAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bank_account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bank_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bank_account")
	}

	if len(bankAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BankAccounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bankAccountR{}
			}
			foreign.R.Bank = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BankID {
				local.R.BankAccounts = append(local.R.BankAccounts, foreign)
				if foreign.R == nil {
					foreign.R = &bankAccountR{}
				}
				foreign.R.Bank = local
				break
			}
		}
	}

	return nil
}

// LoadBankBranches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bankL) LoadBankBranches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBank interface{}, mods queries.Applicator) error {
	var slice []*Bank
	var object *Bank

	if singular {
		var ok bool
		object, ok = maybeBank.(*Bank)
		if !ok {
			object = new(Bank)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBank))
			}
		}
	} else {
		s, ok := maybeBank.(*[]*Bank)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBank))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bankR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bankR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bank_branch`),
		qm.WhereIn(`bank_branch.bank_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bank_branch")
	}

	var resultSlice []*BankBranch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bank_branch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bank_branch")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bank_branch")
	}

	if len(bankBranchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BankBranches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bankBranchR{}
			}
			foreign.R.Bank = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BankID {
				local.R.BankBranches = append(local.R.BankBranches, foreign)
				if foreign.R == nil {
					foreign.R = &bankBranchR{}
				}
				foreign.R.Bank = local
				break
			}
		}
	}

	return nil
}

// AddBankAccounts adds the given related objects to the existing relationships
// of the bank, optionally inserting them as new records.
// Appends related to o.R.BankAccounts.
// Sets related.R.Bank appropriately.
func (o *Bank) AddBankAccounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BankAccount) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BankID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bank_account` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
				strmangle.WhereClause("`", "`", 0, bankAccountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BankID = o.ID
		}
	}

	if o.R == nil {
		o.R = &bankR{
			BankAccounts: related,
		}
	} else {
		o.R.BankAccounts = append(o.R.BankAccounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bankAccountR{
				Bank: o,
			}
		} else {
			rel.R.Bank = o
		}
	}
	return nil
}

// AddBankBranches adds the given related objects to the existing relationships
// of the bank, optionally inserting them as new records.
// Appends related to o.R.BankBranches.
// Sets related.R.Bank appropriately.
func (o *Bank) AddBankBranches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BankBranch) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BankID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bank_branch` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
				strmangle.WhereClause("`", "`", 0, bankBranchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BankID = o.ID
		}
	}

	if o.R == nil {
		o.R = &bankR{
			BankBranches: related,
		}
	} else {
		o.R.BankBranches = append(o.R.BankBranches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bankBranchR{
				Bank: o,
			}
		} else {
			rel.R.Bank = o
		}
	}
	return nil
}

// Banks retrieves all the records using an executor.
func Banks(mods ...qm.QueryMod) bankQuery {
	mods = append(mods, qm.From("`bank`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`bank`.*"})
	}

	return bankQuery{q}
}

// FindBank retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBank(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*Bank, error) {
	bankObj := &Bank{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bank` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bankObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from bank")
	}

	if err = bankObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bankObj, err
	}

	return bankObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Bank) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no bank provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bankColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bankInsertCacheMut.RLock()
	cache, cached := bankInsertCache[key]
	bankInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bankAllColumns,
			bankColumnsWithDefault,
			bankColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bankType, bankMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bankType, bankMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `bank` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `bank` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bank` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bankPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into bank")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bankMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for bank")
	}

CacheNoHooks:
	if !cached {
		bankInsertCacheMut.Lock()
		bankInsertCache[key] = cache
		bankInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Bank.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Bank) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bankUpdateCacheMut.RLock()
	cache, cached := bankUpdateCache[key]
	bankUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bankAllColumns,
			bankPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update bank, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bank` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bankPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bankType, bankMapping, append(wl, bankPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update bank row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for bank")
	}

	if !cached {
		bankUpdateCacheMut.Lock()
		bankUpdateCache[key] = cache
		bankUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bankQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for bank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for bank")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BankSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `bank` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in bank slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all bank")
	}
	return rowsAff, nil
}

var mySQLBankUniqueColumns = []string{
	"id",
	"rand_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Bank) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no bank provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bankColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBankUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bankUpsertCacheMut.RLock()
	cache, cached := bankUpsertCache[key]
	bankUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bankAllColumns,
			bankColumnsWithDefault,
			bankColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bankAllColumns,
			bankPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert bank, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`bank`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bank` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bankType, bankMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bankType, bankMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for bank")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bankMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bankType, bankMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for bank")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for bank")
	}

CacheNoHooks:
	if !cached {
		bankUpsertCacheMut.Lock()
		bankUpsertCache[key] = cache
		bankUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Bank record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Bank) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Bank provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bankPrimaryKeyMapping)
	sql := "DELETE FROM `bank` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from bank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for bank")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bankQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no bankQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from bank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for bank")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BankSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bankBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `bank` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from bank slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for bank")
	}

	if len(bankAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Bank) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBank(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BankSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BankSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `bank`.* FROM `bank` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in BankSlice")
	}

	*o = slice

	return nil
}

// BankExists checks if the Bank row exists.
func BankExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `bank` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if bank exists")
	}

	return exists, nil
}

// Exists checks if the Bank row exists.
func (o *Bank) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BankExists(ctx, exec, o.ID)
}
