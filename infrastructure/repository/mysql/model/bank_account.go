// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BankAccount is an object representing the database table.
type BankAccount struct { // id
	ID uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 支店ID
	BranchID uint64 `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`
	// 口座名
	HolderName string `boil:"holder_name" json:"holder_name" toml:"holder_name" yaml:"holder_name"`
	// 口座番号
	Number    string    `boil:"number" json:"number" toml:"number" yaml:"number"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *bankAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bankAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BankAccountColumns = struct {
	ID         string
	BranchID   string
	HolderName string
	Number     string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	BranchID:   "branch_id",
	HolderName: "holder_name",
	Number:     "number",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var BankAccountTableColumns = struct {
	ID         string
	BranchID   string
	HolderName string
	Number     string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "bank_account.id",
	BranchID:   "bank_account.branch_id",
	HolderName: "bank_account.holder_name",
	Number:     "bank_account.number",
	CreatedAt:  "bank_account.created_at",
	UpdatedAt:  "bank_account.updated_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BankAccountWhere = struct {
	ID         whereHelperuint64
	BranchID   whereHelperuint64
	HolderName whereHelperstring
	Number     whereHelperstring
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperuint64{field: "`bank_account`.`id`"},
	BranchID:   whereHelperuint64{field: "`bank_account`.`branch_id`"},
	HolderName: whereHelperstring{field: "`bank_account`.`holder_name`"},
	Number:     whereHelperstring{field: "`bank_account`.`number`"},
	CreatedAt:  whereHelpertime_Time{field: "`bank_account`.`created_at`"},
	UpdatedAt:  whereHelpertime_Time{field: "`bank_account`.`updated_at`"},
}

// BankAccountRels is where relationship names are stored.
var BankAccountRels = struct {
	Branch         string
	CompanyClients string
}{
	Branch:         "Branch",
	CompanyClients: "CompanyClients",
}

// bankAccountR is where relationships are stored.
type bankAccountR struct {
	Branch         *BankBranch        `boil:"Branch" json:"Branch" toml:"Branch" yaml:"Branch"`
	CompanyClients CompanyClientSlice `boil:"CompanyClients" json:"CompanyClients" toml:"CompanyClients" yaml:"CompanyClients"`
}

// NewStruct creates a new relationship struct
func (*bankAccountR) NewStruct() *bankAccountR {
	return &bankAccountR{}
}

func (r *bankAccountR) GetBranch() *BankBranch {
	if r == nil {
		return nil
	}
	return r.Branch
}

func (r *bankAccountR) GetCompanyClients() CompanyClientSlice {
	if r == nil {
		return nil
	}
	return r.CompanyClients
}

// bankAccountL is where Load methods for each relationship are stored.
type bankAccountL struct{}

var (
	bankAccountAllColumns            = []string{"id", "branch_id", "holder_name", "number", "created_at", "updated_at"}
	bankAccountColumnsWithoutDefault = []string{"id", "branch_id", "holder_name", "number", "created_at", "updated_at"}
	bankAccountColumnsWithDefault    = []string{}
	bankAccountPrimaryKeyColumns     = []string{"id"}
	bankAccountGeneratedColumns      = []string{}
)

type (
	// BankAccountSlice is an alias for a slice of pointers to BankAccount.
	// This should almost always be used instead of []BankAccount.
	BankAccountSlice []*BankAccount
	// BankAccountHook is the signature for custom BankAccount hook methods
	BankAccountHook func(context.Context, boil.ContextExecutor, *BankAccount) error

	bankAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bankAccountType                 = reflect.TypeOf(&BankAccount{})
	bankAccountMapping              = queries.MakeStructMapping(bankAccountType)
	bankAccountPrimaryKeyMapping, _ = queries.BindMapping(bankAccountType, bankAccountMapping, bankAccountPrimaryKeyColumns)
	bankAccountInsertCacheMut       sync.RWMutex
	bankAccountInsertCache          = make(map[string]insertCache)
	bankAccountUpdateCacheMut       sync.RWMutex
	bankAccountUpdateCache          = make(map[string]updateCache)
	bankAccountUpsertCacheMut       sync.RWMutex
	bankAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bankAccountAfterSelectHooks []BankAccountHook

var bankAccountBeforeInsertHooks []BankAccountHook
var bankAccountAfterInsertHooks []BankAccountHook

var bankAccountBeforeUpdateHooks []BankAccountHook
var bankAccountAfterUpdateHooks []BankAccountHook

var bankAccountBeforeDeleteHooks []BankAccountHook
var bankAccountAfterDeleteHooks []BankAccountHook

var bankAccountBeforeUpsertHooks []BankAccountHook
var bankAccountAfterUpsertHooks []BankAccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BankAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BankAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BankAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BankAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BankAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BankAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BankAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BankAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BankAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bankAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBankAccountHook registers your hook function for all future operations.
func AddBankAccountHook(hookPoint boil.HookPoint, bankAccountHook BankAccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bankAccountAfterSelectHooks = append(bankAccountAfterSelectHooks, bankAccountHook)
	case boil.BeforeInsertHook:
		bankAccountBeforeInsertHooks = append(bankAccountBeforeInsertHooks, bankAccountHook)
	case boil.AfterInsertHook:
		bankAccountAfterInsertHooks = append(bankAccountAfterInsertHooks, bankAccountHook)
	case boil.BeforeUpdateHook:
		bankAccountBeforeUpdateHooks = append(bankAccountBeforeUpdateHooks, bankAccountHook)
	case boil.AfterUpdateHook:
		bankAccountAfterUpdateHooks = append(bankAccountAfterUpdateHooks, bankAccountHook)
	case boil.BeforeDeleteHook:
		bankAccountBeforeDeleteHooks = append(bankAccountBeforeDeleteHooks, bankAccountHook)
	case boil.AfterDeleteHook:
		bankAccountAfterDeleteHooks = append(bankAccountAfterDeleteHooks, bankAccountHook)
	case boil.BeforeUpsertHook:
		bankAccountBeforeUpsertHooks = append(bankAccountBeforeUpsertHooks, bankAccountHook)
	case boil.AfterUpsertHook:
		bankAccountAfterUpsertHooks = append(bankAccountAfterUpsertHooks, bankAccountHook)
	}
}

// One returns a single bankAccount record from the query.
func (q bankAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BankAccount, error) {
	o := &BankAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for bank_account")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BankAccount records from the query.
func (q bankAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (BankAccountSlice, error) {
	var o []*BankAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to BankAccount slice")
	}

	if len(bankAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BankAccount records in the query.
func (q bankAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count bank_account rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bankAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if bank_account exists")
	}

	return count > 0, nil
}

// Branch pointed to by the foreign key.
func (o *BankAccount) Branch(mods ...qm.QueryMod) bankBranchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.BranchID),
	}

	queryMods = append(queryMods, mods...)

	return BankBranches(queryMods...)
}

// CompanyClients retrieves all the company_client's CompanyClients with an executor.
func (o *BankAccount) CompanyClients(mods ...qm.QueryMod) companyClientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`company_client`.`bank_account_id`=?", o.ID),
	)

	return CompanyClients(queryMods...)
}

// LoadBranch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bankAccountL) LoadBranch(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBankAccount interface{}, mods queries.Applicator) error {
	var slice []*BankAccount
	var object *BankAccount

	if singular {
		var ok bool
		object, ok = maybeBankAccount.(*BankAccount)
		if !ok {
			object = new(BankAccount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBankAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBankAccount))
			}
		}
	} else {
		s, ok := maybeBankAccount.(*[]*BankAccount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBankAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBankAccount))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bankAccountR{}
		}
		args = append(args, object.BranchID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bankAccountR{}
			}

			for _, a := range args {
				if a == obj.BranchID {
					continue Outer
				}
			}

			args = append(args, obj.BranchID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bank_branch`),
		qm.WhereIn(`bank_branch.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BankBranch")
	}

	var resultSlice []*BankBranch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BankBranch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bank_branch")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bank_branch")
	}

	if len(bankBranchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Branch = foreign
		if foreign.R == nil {
			foreign.R = &bankBranchR{}
		}
		foreign.R.BranchBankAccounts = append(foreign.R.BranchBankAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BranchID == foreign.ID {
				local.R.Branch = foreign
				if foreign.R == nil {
					foreign.R = &bankBranchR{}
				}
				foreign.R.BranchBankAccounts = append(foreign.R.BranchBankAccounts, local)
				break
			}
		}
	}

	return nil
}

// LoadCompanyClients allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bankAccountL) LoadCompanyClients(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBankAccount interface{}, mods queries.Applicator) error {
	var slice []*BankAccount
	var object *BankAccount

	if singular {
		var ok bool
		object, ok = maybeBankAccount.(*BankAccount)
		if !ok {
			object = new(BankAccount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBankAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBankAccount))
			}
		}
	} else {
		s, ok := maybeBankAccount.(*[]*BankAccount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBankAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBankAccount))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bankAccountR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bankAccountR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`company_client`),
		qm.WhereIn(`company_client.bank_account_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load company_client")
	}

	var resultSlice []*CompanyClient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice company_client")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on company_client")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for company_client")
	}

	if len(companyClientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CompanyClients = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &companyClientR{}
			}
			foreign.R.BankAccount = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BankAccountID {
				local.R.CompanyClients = append(local.R.CompanyClients, foreign)
				if foreign.R == nil {
					foreign.R = &companyClientR{}
				}
				foreign.R.BankAccount = local
				break
			}
		}
	}

	return nil
}

// SetBranch of the bankAccount to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.BranchBankAccounts.
func (o *BankAccount) SetBranch(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BankBranch) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `bank_account` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"branch_id"}),
		strmangle.WhereClause("`", "`", 0, bankAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BranchID = related.ID
	if o.R == nil {
		o.R = &bankAccountR{
			Branch: related,
		}
	} else {
		o.R.Branch = related
	}

	if related.R == nil {
		related.R = &bankBranchR{
			BranchBankAccounts: BankAccountSlice{o},
		}
	} else {
		related.R.BranchBankAccounts = append(related.R.BranchBankAccounts, o)
	}

	return nil
}

// AddCompanyClients adds the given related objects to the existing relationships
// of the bank_account, optionally inserting them as new records.
// Appends related to o.R.CompanyClients.
// Sets related.R.BankAccount appropriately.
func (o *BankAccount) AddCompanyClients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CompanyClient) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BankAccountID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `company_client` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"bank_account_id"}),
				strmangle.WhereClause("`", "`", 0, companyClientPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BankAccountID = o.ID
		}
	}

	if o.R == nil {
		o.R = &bankAccountR{
			CompanyClients: related,
		}
	} else {
		o.R.CompanyClients = append(o.R.CompanyClients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &companyClientR{
				BankAccount: o,
			}
		} else {
			rel.R.BankAccount = o
		}
	}
	return nil
}

// BankAccounts retrieves all the records using an executor.
func BankAccounts(mods ...qm.QueryMod) bankAccountQuery {
	mods = append(mods, qm.From("`bank_account`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`bank_account`.*"})
	}

	return bankAccountQuery{q}
}

// FindBankAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBankAccount(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*BankAccount, error) {
	bankAccountObj := &BankAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bank_account` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bankAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from bank_account")
	}

	if err = bankAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bankAccountObj, err
	}

	return bankAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BankAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no bank_account provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bankAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bankAccountInsertCacheMut.RLock()
	cache, cached := bankAccountInsertCache[key]
	bankAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bankAccountAllColumns,
			bankAccountColumnsWithDefault,
			bankAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `bank_account` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `bank_account` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bank_account` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bankAccountPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into bank_account")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for bank_account")
	}

CacheNoHooks:
	if !cached {
		bankAccountInsertCacheMut.Lock()
		bankAccountInsertCache[key] = cache
		bankAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BankAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BankAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bankAccountUpdateCacheMut.RLock()
	cache, cached := bankAccountUpdateCache[key]
	bankAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bankAccountAllColumns,
			bankAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update bank_account, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bank_account` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bankAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, append(wl, bankAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update bank_account row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for bank_account")
	}

	if !cached {
		bankAccountUpdateCacheMut.Lock()
		bankAccountUpdateCache[key] = cache
		bankAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bankAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for bank_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for bank_account")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BankAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `bank_account` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in bankAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all bankAccount")
	}
	return rowsAff, nil
}

var mySQLBankAccountUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BankAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no bank_account provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bankAccountColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBankAccountUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bankAccountUpsertCacheMut.RLock()
	cache, cached := bankAccountUpsertCache[key]
	bankAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bankAccountAllColumns,
			bankAccountColumnsWithDefault,
			bankAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bankAccountAllColumns,
			bankAccountPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert bank_account, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`bank_account`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bank_account` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for bank_account")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bankAccountType, bankAccountMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for bank_account")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for bank_account")
	}

CacheNoHooks:
	if !cached {
		bankAccountUpsertCacheMut.Lock()
		bankAccountUpsertCache[key] = cache
		bankAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BankAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BankAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no BankAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bankAccountPrimaryKeyMapping)
	sql := "DELETE FROM `bank_account` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from bank_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for bank_account")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bankAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no bankAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from bank_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for bank_account")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BankAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bankAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `bank_account` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from bankAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for bank_account")
	}

	if len(bankAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BankAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBankAccount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BankAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BankAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `bank_account`.* FROM `bank_account` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in BankAccountSlice")
	}

	*o = slice

	return nil
}

// BankAccountExists checks if the BankAccount row exists.
func BankAccountExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `bank_account` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if bank_account exists")
	}

	return exists, nil
}

// Exists checks if the BankAccount row exists.
func (o *BankAccount) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BankAccountExists(ctx, exec, o.ID)
}
